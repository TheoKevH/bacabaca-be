// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (title, slug, content, author_id)
VALUES ($1, $2, $3, $4)
`

type CreatePostParams struct {
	Title    string
	Slug     string
	Content  string
	AuthorID pgtype.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.Exec(ctx, createPost,
		arg.Title,
		arg.Slug,
		arg.Content,
		arg.AuthorID,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1 AND author_id = $2
`

type DeletePostParams struct {
	ID       pgtype.UUID
	AuthorID pgtype.UUID
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.Exec(ctx, deletePost, arg.ID, arg.AuthorID)
	return err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, title, slug, content, author_id, created_at FROM posts WHERE slug = $1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRow(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, slug, content, author_id, created_at FROM posts ORDER BY created_at DESC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Content,
			&i.AuthorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts SET title = $1, content = $2 WHERE id = $3 AND author_id = $4
`

type UpdatePostParams struct {
	Title    string
	Content  string
	ID       pgtype.UUID
	AuthorID pgtype.UUID
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.Exec(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.ID,
		arg.AuthorID,
	)
	return err
}
